#!/bin/bash

# Geometry API - Development Setup Script

set -e

echo "ðŸš€ Setting up Geometry API development environment..."

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Function to print colored output
print_status() {
    echo -e "${GREEN}âœ“${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}âš ${NC} $1"
}

print_error() {
    echo -e "${RED}âœ—${NC} $1"
}

# Check if Docker is installed
if ! command -v docker &> /dev/null; then
    print_error "Docker is not installed. Please install Docker first."
    exit 1
fi

# Check if Docker Compose is installed
if ! command -v docker-compose &> /dev/null && ! docker compose version &> /dev/null; then
    print_error "Docker Compose is not installed. Please install Docker Compose first."
    exit 1
fi

print_status "Docker and Docker Compose are installed"

# Create .env file if it doesn't exist
if [ ! -f .env ]; then
    print_warning ".env file not found. Creating from .env.example..."
    if [ -f .env.example ]; then
        cp .env.example .env
        print_status ".env file created"
    else
        print_warning ".env.example not found. Creating basic .env file..."
        cat > .env << EOF
RAILS_ENV=development
DATABASE_URL=postgresql://postgres:password@postgres:5432/geometry_api_development
TEST_DATABASE_URL=postgresql://postgres:password@postgres:5432/geometry_api_test
RAILS_MASTER_KEY=your_master_key_here
JWT_SECRET_KEY=your_jwt_secret_key_here
PORT=3000
HOST=0.0.0.0
LOG_LEVEL=info
EOF
        print_status "Basic .env file created"
    fi
else
    print_status ".env file already exists"
fi

# Start Docker services
print_status "Starting Docker services..."
docker compose up -d

# Wait for services to be ready
print_status "Waiting for services to be ready..."
sleep 10

# Install gems
print_status "Installing Ruby gems..."
docker compose exec geometry-api bundle install

# Create and migrate databases
print_status "Setting up databases..."
docker compose exec geometry-api bundle exec rails db:create
docker compose exec geometry-api bundle exec rails db:migrate

# Run tests to verify setup
print_status "Running tests to verify setup..."
docker compose exec geometry-api bundle exec rspec --format progress || print_warning "Some tests failed, but continuing..."

# Generate Swagger documentation
print_status "Generating Swagger documentation..."
docker compose exec geometry-api bundle exec rake rswag:specs:swaggerize || print_warning "Swagger generation had issues, but continuing..."

# Run security checks
print_status "Running security checks..."
docker compose exec geometry-api bundle exec brakeman --no-pager || print_warning "Brakeman had issues, but continuing..."
docker compose exec geometry-api bundle exec bundle-audit check --update || print_warning "Bundle audit had issues, but continuing..."

# Run code quality checks
print_status "Running code quality checks..."
docker compose exec geometry-api bundle exec rubocop || print_warning "RuboCop had issues, but continuing..."

echo ""
echo "ðŸŽ‰ Setup completed successfully!"
echo ""
echo "ðŸ“š Available services:"
echo "  â€¢ API Server: http://localhost:3000"
echo "  â€¢ Swagger UI: http://localhost:3000/api-docs/index.html"
echo "  â€¢ Health Check: http://localhost:3000/up"
echo ""
echo "ðŸ”§ Useful commands:"
echo "  â€¢ View logs: docker compose logs -f geometry-api"
echo "  â€¢ Run tests: docker compose exec geometry-api bundle exec rspec"
echo "  â€¢ Rails console: docker compose exec geometry-api bundle exec rails console"
echo "  â€¢ Stop services: docker compose down"
echo ""
echo "ðŸ“– For more information, check the README.md file"
